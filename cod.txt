public class ListaLigadaManual {

    // El puntero inicial o "cabeza" (head)
    private NodoPelicula cabeza;
    private int tamanio;

    public ListaLigadaManual() {
        this.cabeza = null;
        this.tamanio = 0;
    }

    // =========================================================
    // A. M√©todo para AGREGAR UN OBJETO A LA LISTA (Al final)
    // =========================================================
    public void agregarAlFinal(Pelicula p) {
        NodoPelicula nuevoNodo = new NodoPelicula(p);

        if (cabeza == null) {
            // Caso 1: La lista est√° vac√≠a, el nuevo nodo es la cabeza
            cabeza = nuevoNodo;
        } else {
            // Caso 2: Recorrer la lista hasta encontrar el √∫ltimo nodo
            NodoPelicula actual = cabeza;
            while (actual.siguiente != null) {
                actual = actual.siguiente;
            }
            // El √∫ltimo nodo encontrado apunta al nuevo nodo
            actual.siguiente = nuevoNodo;
        }
        tamanio++;
        System.out.println("‚úÖ Agregada al final: " + p);
    }
    
    // =========================================================
    // G. M√©todo para AGREGAR UN OBJETO A LA LISTA (Al inicio)
    // =========================================================
    public void agregarAlInicio(Pelicula p) {
        NodoPelicula nuevoNodo = new NodoPelicula(p);
        
        // El puntero del nuevo nodo apunta a la cabeza actual
        nuevoNodo.siguiente = cabeza;
        
        // La cabeza ahora es el nuevo nodo
        cabeza = nuevoNodo; 
        tamanio++;
        System.out.println("üöÄ Agregada al inicio: " + p);
    }

    // =========================================================
    // B. M√©todo para ELIMINAR UN OBJETO DE LA LISTA
    // =========================================================
    public void eliminarPeliculaPorTitulo(String titulo) {
        if (cabeza == null) {
            System.out.println("‚ö†Ô∏è Lista vac√≠a, no se puede eliminar.");
            return;
        }

        // Caso 1: La cabeza es el nodo a eliminar
        if (cabeza.dato.getTitulo().equalsIgnoreCase(titulo)) {
            cabeza = cabeza.siguiente; // La cabeza se mueve al siguiente nodo
            tamanio--;
            System.out.println("‚ùå Eliminada (Cabeza): " + titulo);
            return;
        }

        // Caso 2: El nodo est√° en el medio o al final
        NodoPelicula actual = cabeza;
        NodoPelicula anterior = null;

        while (actual != null && !actual.dato.getTitulo().equalsIgnoreCase(titulo)) {
            anterior = actual;
            actual = actual.siguiente;
        }

        if (actual != null) {
            // Se encontr√≥ el nodo: el nodo anterior salta el nodo actual
            anterior.siguiente = actual.siguiente; 
            tamanio--;
            System.out.println("‚ùå Eliminada: " + titulo);
        } else {
            System.out.println("‚ö†Ô∏è Error: Pel√≠cula '" + titulo + "' no encontrada.");
        }
    }

    // =========================================================
    // C. M√©todo para AGREGAR UN OBJETO ENTRE 2 OBJETOS
    // (Por √≠ndice, ya que no se puede buscar "entre" 2 objetos de forma simple)
    // =========================================================
    public void insertarPeliculaEnPosicion(Pelicula p, int indice) {
        if (indice < 0 || indice > tamanio) {
            System.out.println("‚ö†Ô∏è Error: √çndice " + indice + " fuera de rango.");
            return;
        }
        
        if (indice == 0) {
            agregarAlInicio(p);
            return;
        }
        
        NodoPelicula nuevoNodo = new NodoPelicula(p);
        NodoPelicula actual = cabeza;
        
        // Recorrer hasta el nodo ANTERIOR al √≠ndice deseado
        for (int i = 0; i < indice - 1; i++) {
            actual = actual.siguiente;
        }
        
        // 1. El nuevo nodo apunta al que estaba en el √≠ndice
        nuevoNodo.siguiente = actual.siguiente;
        
        // 2. El nodo anterior apunta al nuevo nodo
        actual.siguiente = nuevoNodo;
        
        tamanio++;
        System.out.println("‚ú® Insertada en √≠ndice " + indice + ": " + p);
    }

    // =========================================================
    // D. M√©todo para MOSTRAR LA LISTA
    // =========================================================
    public void mostrarCatalogo() {
        System.out.println("\n--- CAT√ÅLOGO MANUAL DE PEL√çCULAS ---");
        if (cabeza == null) {
            System.out.println("(Lista vac√≠a)");
            return;
        }

        NodoPelicula actual = cabeza;
        int indice = 0;
        
        // Recorrer la lista mientras el nodo actual no sea nulo
        while (actual != null) {
            System.out.println("[" + indice++ + "] " + actual.dato);
            actual = actual.siguiente; // Mover al siguiente nodo usando el puntero
        }
        System.out.println("------------------------------------");
    }

    // =========================================================
    // M√©todo MAIN para la Demostraci√≥n
    // =========================================================
    public static void main(String[] args) {
        ListaLigadaManual demo = new ListaLigadaManual();
        
        // 1. Agregar al final (M√©todo A)
        demo.agregarAlFinal(new Pelicula("Star Wars", 1977));
        demo.agregarAlFinal(new Pelicula("Titanic", 1997));
        
        // 2. Agregar al inicio (M√©todo G)
        demo.agregarAlInicio(new Pelicula("El Padrino", 1972));
        
        demo.mostrarCatalogo();

        // 3. Insertar entre dos objetos (M√©todo C) - En el √≠ndice 2
        demo.insertarPeliculaEnPosicion(new Pelicula("Pulp Fiction", 1994), 2); 
        
        demo.mostrarCatalogo();

        // 4. Eliminar (M√©todo B)
        demo.eliminarPeliculaPorTitulo("Star Wars");
        
        demo.mostrarCatalogo();
    }
}